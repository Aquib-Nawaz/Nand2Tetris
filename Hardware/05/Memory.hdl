// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
	//// Replace this comment with your code.

    Not(in = address[13], out = notAddress13);
    
    Nand(a = notAddress13, b = address[14], out = notScreen);

    Not(in = address[14], out = notAddress14);

    Or8Way(in= address[0..7], out= or1);
    
    Or(a=address[8], b=address[9], out=or2);
    Or(a=address[10], b=address[11], out=or3);
    Or(a=or2, b=or3, out=or4);
    Or(a=address[12], b=or1, out=or5);
    Or(a=or4,b=or5, out=or012); //or 0..12
    // notOr and 13 and 14
    Not(in=or012, out=nor012);
    And(a=address[13], b=address[14], out=And1314);
    And(a=nor012, b= And1314, out= keyBoard);

    Mux(a= load, b= false, sel= notScreen, out=loadScreen );
    Mux(a= load, b= false, sel= address[14], out=loadData );

    RAM16K(in= in, load= loadData, address= address[0..13], out=outData );
    Screen(in= in, load= loadScreen, address= address[0..12], out=outScreen );
    Keyboard(out = outKeyBoard);
 
    Mux16(a= false, b= outKeyBoard, sel= keyBoard, out= out1);
    Mux16(a= outScreen, b= out1, sel= notScreen, out= out2);
    Mux16(a= out2, b= outData, sel= notAddress14, out= out);
    
}